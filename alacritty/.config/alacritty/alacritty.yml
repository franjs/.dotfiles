# Configuration for Alacritty, the GPU enhanced terminal emulator.
window:
  dimensions:
    columns: 220
    lines: 75

# Font configuration
font:
  # Normal (roman) font face
  normal:
    family: Hack Nerd Font
    # The `style` can be specified to pick a specific face.
    #style: Regular

  # Bold font face
  bold:
    family: Hack Nerd Font
    # The `style` can be specified to pick a specific face.
    #style: Bold

  # Italic font face
  italic:
    family: Hack Nerd Font
    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Bold italic font face
  bold_italic:
    family: Hack Nerd Font
    # The `style` can be specified to pick a specific face.
    #style: Bold Italic

  # Point size
  size: 13.45

  offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  use_thin_strokes: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Oceanic Next)
colors:
  # Default colors
  primary:
    background: '#1b2b34'
    foreground: '#d8dee9'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '#1b2b34'
    cursor: '#ffffff'

  # Normal colors
  normal:
    black:   '#343d46'
    red:     '#EC5f67'
    green:   '#99C794'
    yellow:  '#FAC863'
    blue:    '#6699cc'
    magenta: '#c594c5'
    cyan:    '#5fb3b3'
    white:   '#d8dee9'

  # Bright colors
  bright:
    black:   '#343d46'
    red:     '#EC5f67'
    green:   '#99C794'
    yellow:  '#FAC863'
    blue:    '#6699cc'
    magenta: '#c594c5'
    cyan:    '#5fb3b3'
    white:   '#d8dee9'

# Visual Bell
bell:
  animation: Ease
  duration: 200

# Live config reload (changes require restart)
live_config_reload: true

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher:
     program: open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - { key: V,               mods: Command,        action: Paste                        }
  - { key: C,               mods: Command,        action: Copy                         }
  - { key: Home,                                  chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: Home,                                  chars: "\x1b[1~",  mode: AppCursor   }
  - { key: End,                                   chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: End,                                   chars: "\x1b[4~",  mode: AppCursor   }
  - { key: PageUp,                                chars: "\x1b[5~"                     }
  - { key: PageDown,                              action: "None"                       }
  - { key: Left,            mods: Shift,          chars: "\x1b[1;2D"                   }
  - { key: Left,            mods: Control,        chars: "\x1b[1;5D"                   }
  - { key: Left,            mods: Alt,            chars: "\x1b[1;3D"                   }
    # - { key: Left,                                  chars: "\x1b[D",   mode: ~AppCursor  }
    # - { key: Left,                                  chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,           mods: Shift,          chars: "\x1b[1;2C"                   }
  - { key: Right,           mods: Control,        chars: "\x1b[1;5C"                   }
  - { key: Right,           mods: Alt,            chars: "\x1b[1;3C"                   }
    # - { key: Right,                                chars: "\x1b[C",   mode: ~AppCursor  }
    #- { key: Right,                                 chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,              mods: Shift,          chars: "\x1b[1;2A"                   }
  - { key: Up,              mods: Control,        chars: "\x1b[1;5A"                   }
  - { key: Up,              mods: Alt,            chars: "\x1b[1;3A"                   }
    # - { key: Up,                                    chars: "\x1b[A",   mode: ~AppCursor  }
    # - { key: Up,                                    chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,            mods: Shift,          chars: "\x1b[1;2B"                   }
  - { key: Down,            mods: Control,        chars: "\x1b[1;5B"                   }
  - { key: Down,            mods: Alt,            chars: "\x1b[1;3B"                   }
    #  - { key: Down,                                  chars: "\x1b[B",   mode: ~AppCursor  }
    # - { key: Down,                                  chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,             mods: Shift,          chars: "\x1b[Z"                      }
  - { key: F1,                                    chars: "\x1bOP"                      }
  - { key: F2,                                    chars: "\x1bOQ"                      }
  - { key: F3,                                    chars: "\x1bOR"                      }
  - { key: F4,                                    chars: "\x1bOS"                      }
  - { key: F5,                                    chars: "\x1b[15~"                    }
  - { key: F6,                                    chars: "\x1b[17~"                    }
  - { key: F7,                                    chars: "\x1b[18~"                    }
  - { key: F8,                                    chars: "\x1b[19~"                    }
  - { key: F9,                                    chars: "\x1b[20~"                    }
  - { key: F10,                                   chars: "\x1b[21~"                    }
  - { key: F11,                                   chars: "\x1b[23~"                    }
  - { key: F12,                                   chars: "\x1b[24~"                    }
  - { key: Back,                                  chars: "\x7f"                        }
  - { key: Delete,                                chars: "\x1b[3~",  mode: AppKeypad   }
  - { key: Delete,                                chars: "\x1b[P",   mode: ~AppKeypad  }
  - { key: J,               mods: Alt,            chars: "\x1bj"                       }
  - { key: K,               mods: Alt,            chars: "\x1bk"                       }
  - { key: H,               mods: Alt,            chars: "\x1bh"                       }
  - { key: L,               mods: Alt,            chars: "\x1bl"                       }
  - { key: E,               mods: Alt,            chars: "\x1be"                       }
  - { key: A,               mods: Alt,            chars: "\x1ba"                       }
  - { key: D,               mods: Alt,            chars: "\x1bd"                       }
  - { key: Key0,            mods: Control,        action: ResetFontSize                }
  - { key: Equals,          mods: Control,        action: IncreaseFontSize             }
  - { key: NumpadSubtract,  mods: Control,        action: DecreaseFontSize             }
  - { key: Q,               mods: Control,        chars: "\x11"                        }
  - { key: P,               mods: Command,        chars: ":Telescope find_files\n"     } # Neovim command
  - { key: F,               mods: Command|Shift,  chars: ":Ag\n"                       } # Neovim command
  - { key: Key0,            mods: Command,        chars: ":bnext\n"                    } # Neovim command
  - { key: Key9,            mods: Command,        chars: ":bprev\n"                    } # Neovim command

#key_bindings:
  #- { key: Paste,                                action: Paste          }
  #- { key: Copy,                                 action: Copy           }
  #- { key: L,         mods: Control,             action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi, action: ClearSelection          }
  #- { key: I,                           mode: Vi, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi, action: Copy                    }
  #- { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  #- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi, action: Open                    }
  #- { key: K,                           mode: Vi, action: Up                      }
  #- { key: J,                           mode: Vi, action: Down                    }
  #- { key: H,                           mode: Vi, action: Left                    }
  #- { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  #- { key: B,                           mode: Vi, action: SemanticLeft            }
  #- { key: W,                           mode: Vi, action: SemanticRight           }
  #- { key: E,                           mode: Vi, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }

  # (Windows, Linux, and BSD only)
  #- { key: V,        mods: Control|Shift,           action: Paste            }
  #- { key: C,        mods: Control|Shift,           action: Copy             }
  #- { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  #- { key: Insert,   mods: Shift,                   action: PasteSelection   }
  #- { key: Key0,     mods: Control,                 action: ResetFontSize    }
  #- { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  #- { key: Add,      mods: Control,                 action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,                 action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,      mods: Command, mode: ~Vi, chars: "\x0c"            }
  #- { key: Key0,   mods: Command,            action: ResetFontSize    }
  #- { key: Equals, mods: Command,            action: IncreaseFontSize }
  #- { key: Add,    mods: Command,            action: IncreaseFontSize }
  #- { key: Minus,  mods: Command,            action: DecreaseFontSize }
  #- { key: K,      mods: Command,            action: ClearHistory     }
  #- { key: V,      mods: Command,            action: Paste            }
  #- { key: C,      mods: Command,            action: Copy             }
  #- { key: C,      mods: Command, mode: Vi,  action: ClearSelection   }
  #- { key: H,      mods: Command,            action: Hide             }
  #- { key: M,      mods: Command,            action: Minimize         }
  #- { key: Q,      mods: Command,            action: Quit             }
  #- { key: W,      mods: Command,            action: Quit             }
  #- { key: N,      mods: Command,            action: SpawnNewInstance }
  #- { key: F,      mods: Command|Control,    action: ToggleFullscreen }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
